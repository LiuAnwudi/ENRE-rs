//共计 实体23个 关系46个
fn test() //函数 定义
{
    //// 直接改值
    let mut x = 1; //变量 定义
    x = 6; //修改
    let mut y = x; //变量 定义 使用
    // // 复合运算
    y += 1; //使用 修改
    let mut y2 = 6; //变量 定义
    y2 -= 2; // 减法赋值//使用 修改
    let mut y3 = 6; //变量 定义
    y3 *= 4; // 乘法赋值//使用 修改
    let mut y4 = 6; //变量 定义
    y4 /= 2; // 除法赋值//使用 修改
    let mut y5 = 6; //变量 定义
    y5 %= 3; // 取模赋值//使用 修改
    //拆开
    let z = 6; //变量 定义
    z = z + 1; //使用 修改
}
fn test2() //函数 定义
{
    let mut x = 5; //变量 定义
    let ref_x = &mut x; //变量 定义 引用
    *ref_x = 10; // 通过解引用修改  修改
    let mut x2 = 1; //变量 定义
    let mut y2 = 2; //变量 定义
    (x2, y2) = (3, 4); // 解构赋值 2个修改
    struct Point
//结构体 定义
    {
        x: i32, //变量 定义
        y: i32, //变量 定义
    }

    let mut point = Point { x: 1, y: 2 }; //变量 定义
    point.x = 5; // 结构体字段赋值 修改
}
fn main() //函数 定义
{
    let a = 1; //变量 定义
    let b = 2; //变量 定义
    let c = 3; //变量 定义
    let d = 6; //变量 定义
    let d = (a + b) * c + d; //修改 4个使用
}
